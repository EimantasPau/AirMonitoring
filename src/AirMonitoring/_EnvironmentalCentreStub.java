package AirMonitoring;


/**
* AirMonitoring/_EnvironmentalCentreStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from AirMonitoring.idl
* Tuesday, 17 April 2018 11:24:36 o'clock BST
*/

public class _EnvironmentalCentreStub extends org.omg.CORBA.portable.ObjectImpl implements AirMonitoring.EnvironmentalCentre
{

  public AirMonitoring.Reading[] all_readings ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("all_readings", true);
                $in = _invoke ($out);
                AirMonitoring.Reading $result[] = AirMonitoring.readingsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return all_readings (        );
            } finally {
                _releaseReply ($in);
            }
  } // all_readings

  public AirMonitoring.Reading[] get_readings (String centre_name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("get_readings", true);
                $out.write_string (centre_name);
                $in = _invoke ($out);
                AirMonitoring.Reading $result[] = AirMonitoring.readingsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return get_readings (centre_name        );
            } finally {
                _releaseReply ($in);
            }
  } // get_readings

  public AirMonitoring.CentreInfo[] connected_centres ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_connected_centres", true);
                $in = _invoke ($out);
                AirMonitoring.CentreInfo $result[] = AirMonitoring.centreListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return connected_centres (        );
            } finally {
                _releaseReply ($in);
            }
  } // connected_centres

  public void register_regional_centre (AirMonitoring.CentreInfo info)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("register_regional_centre", true);
                AirMonitoring.CentreInfoHelper.write ($out, info);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                register_regional_centre (info        );
            } finally {
                _releaseReply ($in);
            }
  } // register_regional_centre

  public void unregister_regional_centre (AirMonitoring.CentreInfo info)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unregister_regional_centre", true);
                AirMonitoring.CentreInfoHelper.write ($out, info);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unregister_regional_centre (info        );
            } finally {
                _releaseReply ($in);
            }
  } // unregister_regional_centre

  public void raise_alarm (AirMonitoring.Alarm alarm)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("raise_alarm", true);
                AirMonitoring.AlarmHelper.write ($out, alarm);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                raise_alarm (alarm        );
            } finally {
                _releaseReply ($in);
            }
  } // raise_alarm

  public void register_agency (AirMonitoring.Agency agency)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("register_agency", true);
                AirMonitoring.AgencyHelper.write ($out, agency);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                register_agency (agency        );
            } finally {
                _releaseReply ($in);
            }
  } // register_agency

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:AirMonitoring/EnvironmentalCentre:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _EnvironmentalCentreStub
